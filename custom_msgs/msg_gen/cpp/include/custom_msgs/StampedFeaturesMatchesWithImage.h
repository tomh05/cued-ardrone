/* Auto-generated by genmsg_cpp for file /home/alex/cued-ardrone/custom_msgs/msg/StampedFeaturesMatchesWithImage.msg */
#ifndef CUSTOM_MSGS_MESSAGE_STAMPEDFEATURESMATCHESWITHIMAGE_H
#define CUSTOM_MSGS_MESSAGE_STAMPEDFEATURESMATCHESWITHIMAGE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "std_msgs/Header.h"
#include "sensor_msgs/Image.h"
#include "sensor_msgs/Image.h"

namespace custom_msgs
{
template <class ContainerAllocator>
struct StampedFeaturesMatchesWithImage_ {
  typedef StampedFeaturesMatchesWithImage_<ContainerAllocator> Type;

  StampedFeaturesMatchesWithImage_()
  : header1()
  , header2()
  , points1()
  , points2()
  , descriptors1()
  , descriptors2()
  , descriptors1_stride(0)
  , descriptors2_stride(0)
  , descriptors1_matcher()
  , descriptors2_matcher()
  , image1()
  , image2()
  {
  }

  StampedFeaturesMatchesWithImage_(const ContainerAllocator& _alloc)
  : header1(_alloc)
  , header2(_alloc)
  , points1(_alloc)
  , points2(_alloc)
  , descriptors1(_alloc)
  , descriptors2(_alloc)
  , descriptors1_stride(0)
  , descriptors2_stride(0)
  , descriptors1_matcher(_alloc)
  , descriptors2_matcher(_alloc)
  , image1(_alloc)
  , image2(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header1_type;
   ::std_msgs::Header_<ContainerAllocator>  header1;

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header2_type;
   ::std_msgs::Header_<ContainerAllocator>  header2;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _points1_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  points1;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _points2_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  points2;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _descriptors1_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  descriptors1;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _descriptors2_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  descriptors2;

  typedef int16_t _descriptors1_stride_type;
  int16_t descriptors1_stride;

  typedef int16_t _descriptors2_stride_type;
  int16_t descriptors2_stride;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _descriptors1_matcher_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  descriptors1_matcher;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _descriptors2_matcher_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  descriptors2_matcher;

  typedef  ::sensor_msgs::Image_<ContainerAllocator>  _image1_type;
   ::sensor_msgs::Image_<ContainerAllocator>  image1;

  typedef  ::sensor_msgs::Image_<ContainerAllocator>  _image2_type;
   ::sensor_msgs::Image_<ContainerAllocator>  image2;


  typedef boost::shared_ptr< ::custom_msgs::StampedFeaturesMatchesWithImage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_msgs::StampedFeaturesMatchesWithImage_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct StampedFeaturesMatchesWithImage
typedef  ::custom_msgs::StampedFeaturesMatchesWithImage_<std::allocator<void> > StampedFeaturesMatchesWithImage;

typedef boost::shared_ptr< ::custom_msgs::StampedFeaturesMatchesWithImage> StampedFeaturesMatchesWithImagePtr;
typedef boost::shared_ptr< ::custom_msgs::StampedFeaturesMatchesWithImage const> StampedFeaturesMatchesWithImageConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::custom_msgs::StampedFeaturesMatchesWithImage_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::custom_msgs::StampedFeaturesMatchesWithImage_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace custom_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::custom_msgs::StampedFeaturesMatchesWithImage_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::custom_msgs::StampedFeaturesMatchesWithImage_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::custom_msgs::StampedFeaturesMatchesWithImage_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7f36f3de80a10b6c768dff20c34e5294";
  }

  static const char* value(const  ::custom_msgs::StampedFeaturesMatchesWithImage_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x7f36f3de80a10b6cULL;
  static const uint64_t static_value2 = 0x768dff20c34e5294ULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_msgs::StampedFeaturesMatchesWithImage_<ContainerAllocator> > {
  static const char* value() 
  {
    return "custom_msgs/StampedFeaturesMatchesWithImage";
  }

  static const char* value(const  ::custom_msgs::StampedFeaturesMatchesWithImage_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::custom_msgs::StampedFeaturesMatchesWithImage_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header1\n\
Header header2\n\
float32[] points1\n\
float32[] points2\n\
float32[] descriptors1\n\
float32[] descriptors2\n\
int16 descriptors1_stride\n\
int16 descriptors2_stride\n\
string descriptors1_matcher\n\
string descriptors2_matcher\n\
sensor_msgs/Image image1\n\
sensor_msgs/Image image2\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: sensor_msgs/Image\n\
# This message contains an uncompressed image\n\
# (0, 0) is at top-left corner of image\n\
#\n\
\n\
Header header        # Header timestamp should be acquisition time of image\n\
                     # Header frame_id should be optical frame of camera\n\
                     # origin of frame should be optical center of cameara\n\
                     # +x should point to the right in the image\n\
                     # +y should point down in the image\n\
                     # +z should point into to plane of the image\n\
                     # If the frame_id here and the frame_id of the CameraInfo\n\
                     # message associated with the image conflict\n\
                     # the behavior is undefined\n\
\n\
uint32 height         # image height, that is, number of rows\n\
uint32 width          # image width, that is, number of columns\n\
\n\
# The legal values for encoding are in file src/image_encodings.cpp\n\
# If you want to standardize a new string format, join\n\
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n\
\n\
string encoding       # Encoding of pixels -- channel meaning, ordering, size\n\
                      # taken from the list of strings in src/image_encodings.cpp\n\
\n\
uint8 is_bigendian    # is this data bigendian?\n\
uint32 step           # Full row length in bytes\n\
uint8[] data          # actual matrix data, size is (step * rows)\n\
\n\
";
  }

  static const char* value(const  ::custom_msgs::StampedFeaturesMatchesWithImage_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::custom_msgs::StampedFeaturesMatchesWithImage_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header1);
    stream.next(m.header2);
    stream.next(m.points1);
    stream.next(m.points2);
    stream.next(m.descriptors1);
    stream.next(m.descriptors2);
    stream.next(m.descriptors1_stride);
    stream.next(m.descriptors2_stride);
    stream.next(m.descriptors1_matcher);
    stream.next(m.descriptors2_matcher);
    stream.next(m.image1);
    stream.next(m.image2);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct StampedFeaturesMatchesWithImage_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_msgs::StampedFeaturesMatchesWithImage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::custom_msgs::StampedFeaturesMatchesWithImage_<ContainerAllocator> & v) 
  {
    s << indent << "header1: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header1);
    s << indent << "header2: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header2);
    s << indent << "points1[]" << std::endl;
    for (size_t i = 0; i < v.points1.size(); ++i)
    {
      s << indent << "  points1[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.points1[i]);
    }
    s << indent << "points2[]" << std::endl;
    for (size_t i = 0; i < v.points2.size(); ++i)
    {
      s << indent << "  points2[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.points2[i]);
    }
    s << indent << "descriptors1[]" << std::endl;
    for (size_t i = 0; i < v.descriptors1.size(); ++i)
    {
      s << indent << "  descriptors1[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.descriptors1[i]);
    }
    s << indent << "descriptors2[]" << std::endl;
    for (size_t i = 0; i < v.descriptors2.size(); ++i)
    {
      s << indent << "  descriptors2[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.descriptors2[i]);
    }
    s << indent << "descriptors1_stride: ";
    Printer<int16_t>::stream(s, indent + "  ", v.descriptors1_stride);
    s << indent << "descriptors2_stride: ";
    Printer<int16_t>::stream(s, indent + "  ", v.descriptors2_stride);
    s << indent << "descriptors1_matcher: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.descriptors1_matcher);
    s << indent << "descriptors2_matcher: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.descriptors2_matcher);
    s << indent << "image1: ";
s << std::endl;
    Printer< ::sensor_msgs::Image_<ContainerAllocator> >::stream(s, indent + "  ", v.image1);
    s << indent << "image2: ";
s << std::endl;
    Printer< ::sensor_msgs::Image_<ContainerAllocator> >::stream(s, indent + "  ", v.image2);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CUSTOM_MSGS_MESSAGE_STAMPEDFEATURESMATCHESWITHIMAGE_H

