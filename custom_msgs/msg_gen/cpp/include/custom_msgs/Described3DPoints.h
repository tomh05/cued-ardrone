/* Auto-generated by genmsg_cpp for file /home/alex/cued-ardrone/custom_msgs/msg/Described3DPoints.msg */
#ifndef CUSTOM_MSGS_MESSAGE_DESCRIBED3DPOINTS_H
#define CUSTOM_MSGS_MESSAGE_DESCRIBED3DPOINTS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace custom_msgs
{
template <class ContainerAllocator>
struct Described3DPoints_ {
  typedef Described3DPoints_<ContainerAllocator> Type;

  Described3DPoints_()
  : header()
  , points()
  , position_i()
  , quat_w_to_i()
  , quat_i_to_w()
  , descriptors()
  , descriptors_stride(0)
  , descriptors_matcher()
  {
  }

  Described3DPoints_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , points(_alloc)
  , position_i(_alloc)
  , quat_w_to_i(_alloc)
  , quat_i_to_w(_alloc)
  , descriptors(_alloc)
  , descriptors_stride(0)
  , descriptors_matcher(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _points_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  points;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _position_i_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  position_i;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _quat_w_to_i_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  quat_w_to_i;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _quat_i_to_w_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  quat_i_to_w;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _descriptors_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  descriptors;

  typedef int16_t _descriptors_stride_type;
  int16_t descriptors_stride;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _descriptors_matcher_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  descriptors_matcher;


  typedef boost::shared_ptr< ::custom_msgs::Described3DPoints_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_msgs::Described3DPoints_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Described3DPoints
typedef  ::custom_msgs::Described3DPoints_<std::allocator<void> > Described3DPoints;

typedef boost::shared_ptr< ::custom_msgs::Described3DPoints> Described3DPointsPtr;
typedef boost::shared_ptr< ::custom_msgs::Described3DPoints const> Described3DPointsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::custom_msgs::Described3DPoints_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::custom_msgs::Described3DPoints_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace custom_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::custom_msgs::Described3DPoints_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::custom_msgs::Described3DPoints_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::custom_msgs::Described3DPoints_<ContainerAllocator> > {
  static const char* value() 
  {
    return "027af8ce1f97f9f0efb9ed891a4637a3";
  }

  static const char* value(const  ::custom_msgs::Described3DPoints_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x027af8ce1f97f9f0ULL;
  static const uint64_t static_value2 = 0xefb9ed891a4637a3ULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_msgs::Described3DPoints_<ContainerAllocator> > {
  static const char* value() 
  {
    return "custom_msgs/Described3DPoints";
  }

  static const char* value(const  ::custom_msgs::Described3DPoints_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::custom_msgs::Described3DPoints_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
float32[] points\n\
float32[] position_i\n\
float32[] quat_w_to_i\n\
float32[] quat_i_to_w\n\
float32[] descriptors\n\
int16 descriptors_stride\n\
string descriptors_matcher\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::custom_msgs::Described3DPoints_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::custom_msgs::Described3DPoints_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::custom_msgs::Described3DPoints_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::custom_msgs::Described3DPoints_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.points);
    stream.next(m.position_i);
    stream.next(m.quat_w_to_i);
    stream.next(m.quat_i_to_w);
    stream.next(m.descriptors);
    stream.next(m.descriptors_stride);
    stream.next(m.descriptors_matcher);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Described3DPoints_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_msgs::Described3DPoints_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::custom_msgs::Described3DPoints_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.points[i]);
    }
    s << indent << "position_i[]" << std::endl;
    for (size_t i = 0; i < v.position_i.size(); ++i)
    {
      s << indent << "  position_i[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.position_i[i]);
    }
    s << indent << "quat_w_to_i[]" << std::endl;
    for (size_t i = 0; i < v.quat_w_to_i.size(); ++i)
    {
      s << indent << "  quat_w_to_i[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.quat_w_to_i[i]);
    }
    s << indent << "quat_i_to_w[]" << std::endl;
    for (size_t i = 0; i < v.quat_i_to_w.size(); ++i)
    {
      s << indent << "  quat_i_to_w[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.quat_i_to_w[i]);
    }
    s << indent << "descriptors[]" << std::endl;
    for (size_t i = 0; i < v.descriptors.size(); ++i)
    {
      s << indent << "  descriptors[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.descriptors[i]);
    }
    s << indent << "descriptors_stride: ";
    Printer<int16_t>::stream(s, indent + "  ", v.descriptors_stride);
    s << indent << "descriptors_matcher: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.descriptors_matcher);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CUSTOM_MSGS_MESSAGE_DESCRIBED3DPOINTS_H

