/* Auto-generated by genmsg_cpp for file /home/alex/cued-ardrone/custom_msgs/msg/Visualisation.msg */
#ifndef CUSTOM_MSGS_MESSAGE_VISUALISATION_H
#define CUSTOM_MSGS_MESSAGE_VISUALISATION_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "std_msgs/Header.h"

namespace custom_msgs
{
template <class ContainerAllocator>
struct Visualisation_ {
  typedef Visualisation_<ContainerAllocator> Type;

  Visualisation_()
  : header1()
  , header2()
  , points1()
  , points2()
  , reprojected1()
  , reprojected2()
  {
  }

  Visualisation_(const ContainerAllocator& _alloc)
  : header1(_alloc)
  , header2(_alloc)
  , points1(_alloc)
  , points2(_alloc)
  , reprojected1(_alloc)
  , reprojected2(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header1_type;
   ::std_msgs::Header_<ContainerAllocator>  header1;

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header2_type;
   ::std_msgs::Header_<ContainerAllocator>  header2;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _points1_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  points1;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _points2_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  points2;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _reprojected1_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  reprojected1;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _reprojected2_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  reprojected2;


  typedef boost::shared_ptr< ::custom_msgs::Visualisation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_msgs::Visualisation_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Visualisation
typedef  ::custom_msgs::Visualisation_<std::allocator<void> > Visualisation;

typedef boost::shared_ptr< ::custom_msgs::Visualisation> VisualisationPtr;
typedef boost::shared_ptr< ::custom_msgs::Visualisation const> VisualisationConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::custom_msgs::Visualisation_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::custom_msgs::Visualisation_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace custom_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::custom_msgs::Visualisation_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::custom_msgs::Visualisation_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::custom_msgs::Visualisation_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b425dd08e96d44f498f69a6461e54acd";
  }

  static const char* value(const  ::custom_msgs::Visualisation_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb425dd08e96d44f4ULL;
  static const uint64_t static_value2 = 0x98f69a6461e54acdULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_msgs::Visualisation_<ContainerAllocator> > {
  static const char* value() 
  {
    return "custom_msgs/Visualisation";
  }

  static const char* value(const  ::custom_msgs::Visualisation_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::custom_msgs::Visualisation_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header1\n\
Header header2\n\
float32[] points1\n\
float32[] points2\n\
float32[] reprojected1\n\
float32[] reprojected2\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::custom_msgs::Visualisation_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::custom_msgs::Visualisation_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header1);
    stream.next(m.header2);
    stream.next(m.points1);
    stream.next(m.points2);
    stream.next(m.reprojected1);
    stream.next(m.reprojected2);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Visualisation_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_msgs::Visualisation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::custom_msgs::Visualisation_<ContainerAllocator> & v) 
  {
    s << indent << "header1: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header1);
    s << indent << "header2: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header2);
    s << indent << "points1[]" << std::endl;
    for (size_t i = 0; i < v.points1.size(); ++i)
    {
      s << indent << "  points1[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.points1[i]);
    }
    s << indent << "points2[]" << std::endl;
    for (size_t i = 0; i < v.points2.size(); ++i)
    {
      s << indent << "  points2[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.points2[i]);
    }
    s << indent << "reprojected1[]" << std::endl;
    for (size_t i = 0; i < v.reprojected1.size(); ++i)
    {
      s << indent << "  reprojected1[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.reprojected1[i]);
    }
    s << indent << "reprojected2[]" << std::endl;
    for (size_t i = 0; i < v.reprojected2.size(); ++i)
    {
      s << indent << "  reprojected2[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.reprojected2[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // CUSTOM_MSGS_MESSAGE_VISUALISATION_H

