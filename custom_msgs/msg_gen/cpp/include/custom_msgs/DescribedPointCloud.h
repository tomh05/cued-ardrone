/* Auto-generated by genmsg_cpp for file /home/alex/cued-ardrone/custom_msgs/msg/DescribedPointCloud.msg */
#ifndef CUSTOM_MSGS_MESSAGE_DESCRIBEDPOINTCLOUD_H
#define CUSTOM_MSGS_MESSAGE_DESCRIBEDPOINTCLOUD_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "sensor_msgs/PointCloud.h"

namespace custom_msgs
{
template <class ContainerAllocator>
struct DescribedPointCloud_ {
  typedef DescribedPointCloud_<ContainerAllocator> Type;

  DescribedPointCloud_()
  : cloud()
  , descriptors()
  , desc_stride(0)
  , kp()
  {
  }

  DescribedPointCloud_(const ContainerAllocator& _alloc)
  : cloud(_alloc)
  , descriptors(_alloc)
  , desc_stride(0)
  , kp(_alloc)
  {
  }

  typedef  ::sensor_msgs::PointCloud_<ContainerAllocator>  _cloud_type;
   ::sensor_msgs::PointCloud_<ContainerAllocator>  cloud;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _descriptors_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  descriptors;

  typedef int16_t _desc_stride_type;
  int16_t desc_stride;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _kp_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  kp;


  typedef boost::shared_ptr< ::custom_msgs::DescribedPointCloud_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_msgs::DescribedPointCloud_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct DescribedPointCloud
typedef  ::custom_msgs::DescribedPointCloud_<std::allocator<void> > DescribedPointCloud;

typedef boost::shared_ptr< ::custom_msgs::DescribedPointCloud> DescribedPointCloudPtr;
typedef boost::shared_ptr< ::custom_msgs::DescribedPointCloud const> DescribedPointCloudConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::custom_msgs::DescribedPointCloud_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::custom_msgs::DescribedPointCloud_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace custom_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::custom_msgs::DescribedPointCloud_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::custom_msgs::DescribedPointCloud_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::custom_msgs::DescribedPointCloud_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b7ca0258eada5ecc55971d4f1db1e74f";
  }

  static const char* value(const  ::custom_msgs::DescribedPointCloud_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb7ca0258eada5eccULL;
  static const uint64_t static_value2 = 0x55971d4f1db1e74fULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_msgs::DescribedPointCloud_<ContainerAllocator> > {
  static const char* value() 
  {
    return "custom_msgs/DescribedPointCloud";
  }

  static const char* value(const  ::custom_msgs::DescribedPointCloud_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::custom_msgs::DescribedPointCloud_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sensor_msgs/PointCloud cloud\n\
float32[] descriptors\n\
int16 desc_stride\n\
float32[] kp\n\
\n\
================================================================================\n\
MSG: sensor_msgs/PointCloud\n\
# This message holds a collection of 3d points, plus optional additional\n\
# information about each point.\n\
\n\
# Time of sensor data acquisition, coordinate frame ID.\n\
Header header\n\
\n\
# Array of 3d points. Each Point32 should be interpreted as a 3d point\n\
# in the frame given in the header.\n\
geometry_msgs/Point32[] points\n\
\n\
# Each channel should have the same number of elements as points array,\n\
# and the data in each channel should correspond 1:1 with each point.\n\
# Channel names in common practice are listed in ChannelFloat32.msg.\n\
ChannelFloat32[] channels\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
================================================================================\n\
MSG: sensor_msgs/ChannelFloat32\n\
# This message is used by the PointCloud message to hold optional data\n\
# associated with each point in the cloud. The length of the values\n\
# array should be the same as the length of the points array in the\n\
# PointCloud, and each value should be associated with the corresponding\n\
# point.\n\
\n\
# Channel names in existing practice include:\n\
#   \"u\", \"v\" - row and column (respectively) in the left stereo image.\n\
#              This is opposite to usual conventions but remains for\n\
#              historical reasons. The newer PointCloud2 message has no\n\
#              such problem.\n\
#   \"rgb\" - For point clouds produced by color stereo cameras. uint8\n\
#           (R,G,B) values packed into the least significant 24 bits,\n\
#           in order.\n\
#   \"intensity\" - laser or pixel intensity.\n\
#   \"distance\"\n\
\n\
# The channel name should give semantics of the channel (e.g.\n\
# \"intensity\" instead of \"value\").\n\
string name\n\
\n\
# The values array should be 1-1 with the elements of the associated\n\
# PointCloud.\n\
float32[] values\n\
\n\
";
  }

  static const char* value(const  ::custom_msgs::DescribedPointCloud_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::custom_msgs::DescribedPointCloud_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.cloud);
    stream.next(m.descriptors);
    stream.next(m.desc_stride);
    stream.next(m.kp);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct DescribedPointCloud_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_msgs::DescribedPointCloud_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::custom_msgs::DescribedPointCloud_<ContainerAllocator> & v) 
  {
    s << indent << "cloud: ";
s << std::endl;
    Printer< ::sensor_msgs::PointCloud_<ContainerAllocator> >::stream(s, indent + "  ", v.cloud);
    s << indent << "descriptors[]" << std::endl;
    for (size_t i = 0; i < v.descriptors.size(); ++i)
    {
      s << indent << "  descriptors[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.descriptors[i]);
    }
    s << indent << "desc_stride: ";
    Printer<int16_t>::stream(s, indent + "  ", v.desc_stride);
    s << indent << "kp[]" << std::endl;
    for (size_t i = 0; i < v.kp.size(); ++i)
    {
      s << indent << "  kp[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.kp[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // CUSTOM_MSGS_MESSAGE_DESCRIBEDPOINTCLOUD_H

