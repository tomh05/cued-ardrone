/* Auto-generated by genmsg_cpp for file /home/rujian/fuerte_workspace/cued-ardrone/dynamics/srv/HullSelect.srv */
#ifndef DYNAMICS_SERVICE_HULLSELECT_H
#define DYNAMICS_SERVICE_HULLSELECT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace dynamics
{
template <class ContainerAllocator>
struct HullSelectRequest_ {
  typedef HullSelectRequest_<ContainerAllocator> Type;

  HullSelectRequest_()
  : type(0)
  {
  }

  HullSelectRequest_(const ContainerAllocator& _alloc)
  : type(0)
  {
  }

  typedef uint8_t _type_type;
  uint8_t type;


  typedef boost::shared_ptr< ::dynamics::HullSelectRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dynamics::HullSelectRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct HullSelectRequest
typedef  ::dynamics::HullSelectRequest_<std::allocator<void> > HullSelectRequest;

typedef boost::shared_ptr< ::dynamics::HullSelectRequest> HullSelectRequestPtr;
typedef boost::shared_ptr< ::dynamics::HullSelectRequest const> HullSelectRequestConstPtr;


template <class ContainerAllocator>
struct HullSelectResponse_ {
  typedef HullSelectResponse_<ContainerAllocator> Type;

  HullSelectResponse_()
  : result(false)
  {
  }

  HullSelectResponse_(const ContainerAllocator& _alloc)
  : result(false)
  {
  }

  typedef uint8_t _result_type;
  uint8_t result;


  typedef boost::shared_ptr< ::dynamics::HullSelectResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dynamics::HullSelectResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct HullSelectResponse
typedef  ::dynamics::HullSelectResponse_<std::allocator<void> > HullSelectResponse;

typedef boost::shared_ptr< ::dynamics::HullSelectResponse> HullSelectResponsePtr;
typedef boost::shared_ptr< ::dynamics::HullSelectResponse const> HullSelectResponseConstPtr;

struct HullSelect
{

typedef HullSelectRequest Request;
typedef HullSelectResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct HullSelect
} // namespace dynamics

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::dynamics::HullSelectRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::dynamics::HullSelectRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::dynamics::HullSelectRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3958533281df6e9cc0a725a386f3b5df";
  }

  static const char* value(const  ::dynamics::HullSelectRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3958533281df6e9cULL;
  static const uint64_t static_value2 = 0xc0a725a386f3b5dfULL;
};

template<class ContainerAllocator>
struct DataType< ::dynamics::HullSelectRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dynamics/HullSelectRequest";
  }

  static const char* value(const  ::dynamics::HullSelectRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::dynamics::HullSelectRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 type\n\
\n\
";
  }

  static const char* value(const  ::dynamics::HullSelectRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::dynamics::HullSelectRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::dynamics::HullSelectResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::dynamics::HullSelectResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::dynamics::HullSelectResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "eb13ac1f1354ccecb7941ee8fa2192e8";
  }

  static const char* value(const  ::dynamics::HullSelectResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xeb13ac1f1354ccecULL;
  static const uint64_t static_value2 = 0xb7941ee8fa2192e8ULL;
};

template<class ContainerAllocator>
struct DataType< ::dynamics::HullSelectResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dynamics/HullSelectResponse";
  }

  static const char* value(const  ::dynamics::HullSelectResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::dynamics::HullSelectResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool result\n\
\n\
";
  }

  static const char* value(const  ::dynamics::HullSelectResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::dynamics::HullSelectResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::dynamics::HullSelectRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.type);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct HullSelectRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::dynamics::HullSelectResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.result);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct HullSelectResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<dynamics::HullSelect> {
  static const char* value() 
  {
    return "3f39d970b40bc0b36aa2136e89b31962";
  }

  static const char* value(const dynamics::HullSelect&) { return value(); } 
};

template<>
struct DataType<dynamics::HullSelect> {
  static const char* value() 
  {
    return "dynamics/HullSelect";
  }

  static const char* value(const dynamics::HullSelect&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<dynamics::HullSelectRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3f39d970b40bc0b36aa2136e89b31962";
  }

  static const char* value(const dynamics::HullSelectRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<dynamics::HullSelectRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dynamics/HullSelect";
  }

  static const char* value(const dynamics::HullSelectRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<dynamics::HullSelectResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3f39d970b40bc0b36aa2136e89b31962";
  }

  static const char* value(const dynamics::HullSelectResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<dynamics::HullSelectResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dynamics/HullSelect";
  }

  static const char* value(const dynamics::HullSelectResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // DYNAMICS_SERVICE_HULLSELECT_H

