/* Auto-generated by genmsg_cpp for file /home/rujian/fuerte_workspace/cued-ardrone/dynamics/srv/CaptureImageFeatures.srv */
#ifndef DYNAMICS_SERVICE_CAPTUREIMAGEFEATURES_H
#define DYNAMICS_SERVICE_CAPTUREIMAGEFEATURES_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"



#include "std_msgs/Float32MultiArray.h"
#include "std_msgs/Float32MultiArray.h"

namespace dynamics
{
template <class ContainerAllocator>
struct CaptureImageFeaturesRequest_ {
  typedef CaptureImageFeaturesRequest_<ContainerAllocator> Type;

  CaptureImageFeaturesRequest_()
  : seq(0)
  {
  }

  CaptureImageFeaturesRequest_(const ContainerAllocator& _alloc)
  : seq(0)
  {
  }

  typedef uint8_t _seq_type;
  uint8_t seq;


  typedef boost::shared_ptr< ::dynamics::CaptureImageFeaturesRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dynamics::CaptureImageFeaturesRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct CaptureImageFeaturesRequest
typedef  ::dynamics::CaptureImageFeaturesRequest_<std::allocator<void> > CaptureImageFeaturesRequest;

typedef boost::shared_ptr< ::dynamics::CaptureImageFeaturesRequest> CaptureImageFeaturesRequestPtr;
typedef boost::shared_ptr< ::dynamics::CaptureImageFeaturesRequest const> CaptureImageFeaturesRequestConstPtr;


template <class ContainerAllocator>
struct CaptureImageFeaturesResponse_ {
  typedef CaptureImageFeaturesResponse_<ContainerAllocator> Type;

  CaptureImageFeaturesResponse_()
  : error(0)
  , kppt()
  , desc()
  , alt(0)
  {
  }

  CaptureImageFeaturesResponse_(const ContainerAllocator& _alloc)
  : error(0)
  , kppt(_alloc)
  , desc(_alloc)
  , alt(0)
  {
  }

  typedef uint8_t _error_type;
  uint8_t error;

  typedef  ::std_msgs::Float32MultiArray_<ContainerAllocator>  _kppt_type;
   ::std_msgs::Float32MultiArray_<ContainerAllocator>  kppt;

  typedef  ::std_msgs::Float32MultiArray_<ContainerAllocator>  _desc_type;
   ::std_msgs::Float32MultiArray_<ContainerAllocator>  desc;

  typedef int32_t _alt_type;
  int32_t alt;


  typedef boost::shared_ptr< ::dynamics::CaptureImageFeaturesResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dynamics::CaptureImageFeaturesResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct CaptureImageFeaturesResponse
typedef  ::dynamics::CaptureImageFeaturesResponse_<std::allocator<void> > CaptureImageFeaturesResponse;

typedef boost::shared_ptr< ::dynamics::CaptureImageFeaturesResponse> CaptureImageFeaturesResponsePtr;
typedef boost::shared_ptr< ::dynamics::CaptureImageFeaturesResponse const> CaptureImageFeaturesResponseConstPtr;

struct CaptureImageFeatures
{

typedef CaptureImageFeaturesRequest Request;
typedef CaptureImageFeaturesResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct CaptureImageFeatures
} // namespace dynamics

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::dynamics::CaptureImageFeaturesRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::dynamics::CaptureImageFeaturesRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::dynamics::CaptureImageFeaturesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d78458bf3512ae8c9b3dc0b84abfc6ac";
  }

  static const char* value(const  ::dynamics::CaptureImageFeaturesRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd78458bf3512ae8cULL;
  static const uint64_t static_value2 = 0x9b3dc0b84abfc6acULL;
};

template<class ContainerAllocator>
struct DataType< ::dynamics::CaptureImageFeaturesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dynamics/CaptureImageFeaturesRequest";
  }

  static const char* value(const  ::dynamics::CaptureImageFeaturesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::dynamics::CaptureImageFeaturesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 seq\n\
\n\
";
  }

  static const char* value(const  ::dynamics::CaptureImageFeaturesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::dynamics::CaptureImageFeaturesRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::dynamics::CaptureImageFeaturesResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::dynamics::CaptureImageFeaturesResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::dynamics::CaptureImageFeaturesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "39445debd8780fece36d10c1049eec15";
  }

  static const char* value(const  ::dynamics::CaptureImageFeaturesResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x39445debd8780fecULL;
  static const uint64_t static_value2 = 0xe36d10c1049eec15ULL;
};

template<class ContainerAllocator>
struct DataType< ::dynamics::CaptureImageFeaturesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dynamics/CaptureImageFeaturesResponse";
  }

  static const char* value(const  ::dynamics::CaptureImageFeaturesResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::dynamics::CaptureImageFeaturesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 error\n\
std_msgs/Float32MultiArray kppt\n\
std_msgs/Float32MultiArray desc\n\
int32 alt\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Float32MultiArray\n\
# Please look at the MultiArrayLayout message definition for\n\
# documentation on all multiarrays.\n\
\n\
MultiArrayLayout  layout        # specification of data layout\n\
float32[]         data          # array of data\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/MultiArrayLayout\n\
# The multiarray declares a generic multi-dimensional array of a\n\
# particular data type.  Dimensions are ordered from outer most\n\
# to inner most.\n\
\n\
MultiArrayDimension[] dim # Array of dimension properties\n\
uint32 data_offset        # padding bytes at front of data\n\
\n\
# Accessors should ALWAYS be written in terms of dimension stride\n\
# and specified outer-most dimension first.\n\
# \n\
# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n\
#\n\
# A standard, 3-channel 640x480 image with interleaved color channels\n\
# would be specified as:\n\
#\n\
# dim[0].label  = \"height\"\n\
# dim[0].size   = 480\n\
# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n\
# dim[1].label  = \"width\"\n\
# dim[1].size   = 640\n\
# dim[1].stride = 3*640 = 1920\n\
# dim[2].label  = \"channel\"\n\
# dim[2].size   = 3\n\
# dim[2].stride = 3\n\
#\n\
# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n\
================================================================================\n\
MSG: std_msgs/MultiArrayDimension\n\
string label   # label of given dimension\n\
uint32 size    # size of given dimension (in type units)\n\
uint32 stride  # stride of given dimension\n\
";
  }

  static const char* value(const  ::dynamics::CaptureImageFeaturesResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::dynamics::CaptureImageFeaturesRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.seq);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CaptureImageFeaturesRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::dynamics::CaptureImageFeaturesResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.error);
    stream.next(m.kppt);
    stream.next(m.desc);
    stream.next(m.alt);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CaptureImageFeaturesResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<dynamics::CaptureImageFeatures> {
  static const char* value() 
  {
    return "c1e4356bc562947c4dacade537cc17ce";
  }

  static const char* value(const dynamics::CaptureImageFeatures&) { return value(); } 
};

template<>
struct DataType<dynamics::CaptureImageFeatures> {
  static const char* value() 
  {
    return "dynamics/CaptureImageFeatures";
  }

  static const char* value(const dynamics::CaptureImageFeatures&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<dynamics::CaptureImageFeaturesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c1e4356bc562947c4dacade537cc17ce";
  }

  static const char* value(const dynamics::CaptureImageFeaturesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<dynamics::CaptureImageFeaturesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dynamics/CaptureImageFeatures";
  }

  static const char* value(const dynamics::CaptureImageFeaturesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<dynamics::CaptureImageFeaturesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c1e4356bc562947c4dacade537cc17ce";
  }

  static const char* value(const dynamics::CaptureImageFeaturesResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<dynamics::CaptureImageFeaturesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dynamics/CaptureImageFeatures";
  }

  static const char* value(const dynamics::CaptureImageFeaturesResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // DYNAMICS_SERVICE_CAPTUREIMAGEFEATURES_H

