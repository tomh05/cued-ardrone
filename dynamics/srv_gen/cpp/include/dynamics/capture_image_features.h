/* Auto-generated by genmsg_cpp for file /home/rujian/fuerte_workspace/cued-ardrone/dynamics/srv/capture_image_features.srv */
#ifndef DYNAMICS_SERVICE_CAPTURE_IMAGE_FEATURES_H
#define DYNAMICS_SERVICE_CAPTURE_IMAGE_FEATURES_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"



#include "std_msgs/Float32MultiArray.h"
#include "std_msgs/Float32MultiArray.h"

namespace dynamics
{
template <class ContainerAllocator>
struct capture_image_featuresRequest_ {
  typedef capture_image_featuresRequest_<ContainerAllocator> Type;

  capture_image_featuresRequest_()
  : seq(0)
  {
  }

  capture_image_featuresRequest_(const ContainerAllocator& _alloc)
  : seq(0)
  {
  }

  typedef uint8_t _seq_type;
  uint8_t seq;


  typedef boost::shared_ptr< ::dynamics::capture_image_featuresRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dynamics::capture_image_featuresRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct capture_image_featuresRequest
typedef  ::dynamics::capture_image_featuresRequest_<std::allocator<void> > capture_image_featuresRequest;

typedef boost::shared_ptr< ::dynamics::capture_image_featuresRequest> capture_image_featuresRequestPtr;
typedef boost::shared_ptr< ::dynamics::capture_image_featuresRequest const> capture_image_featuresRequestConstPtr;


template <class ContainerAllocator>
struct capture_image_featuresResponse_ {
  typedef capture_image_featuresResponse_<ContainerAllocator> Type;

  capture_image_featuresResponse_()
  : kppt()
  , desc()
  {
  }

  capture_image_featuresResponse_(const ContainerAllocator& _alloc)
  : kppt(_alloc)
  , desc(_alloc)
  {
  }

  typedef  ::std_msgs::Float32MultiArray_<ContainerAllocator>  _kppt_type;
   ::std_msgs::Float32MultiArray_<ContainerAllocator>  kppt;

  typedef  ::std_msgs::Float32MultiArray_<ContainerAllocator>  _desc_type;
   ::std_msgs::Float32MultiArray_<ContainerAllocator>  desc;


  typedef boost::shared_ptr< ::dynamics::capture_image_featuresResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dynamics::capture_image_featuresResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct capture_image_featuresResponse
typedef  ::dynamics::capture_image_featuresResponse_<std::allocator<void> > capture_image_featuresResponse;

typedef boost::shared_ptr< ::dynamics::capture_image_featuresResponse> capture_image_featuresResponsePtr;
typedef boost::shared_ptr< ::dynamics::capture_image_featuresResponse const> capture_image_featuresResponseConstPtr;

struct capture_image_features
{

typedef capture_image_featuresRequest Request;
typedef capture_image_featuresResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct capture_image_features
} // namespace dynamics

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::dynamics::capture_image_featuresRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::dynamics::capture_image_featuresRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::dynamics::capture_image_featuresRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d78458bf3512ae8c9b3dc0b84abfc6ac";
  }

  static const char* value(const  ::dynamics::capture_image_featuresRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd78458bf3512ae8cULL;
  static const uint64_t static_value2 = 0x9b3dc0b84abfc6acULL;
};

template<class ContainerAllocator>
struct DataType< ::dynamics::capture_image_featuresRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dynamics/capture_image_featuresRequest";
  }

  static const char* value(const  ::dynamics::capture_image_featuresRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::dynamics::capture_image_featuresRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 seq\n\
\n\
";
  }

  static const char* value(const  ::dynamics::capture_image_featuresRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::dynamics::capture_image_featuresRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::dynamics::capture_image_featuresResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::dynamics::capture_image_featuresResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::dynamics::capture_image_featuresResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c040efa3aca640fa5bbce4e9f025e897";
  }

  static const char* value(const  ::dynamics::capture_image_featuresResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc040efa3aca640faULL;
  static const uint64_t static_value2 = 0x5bbce4e9f025e897ULL;
};

template<class ContainerAllocator>
struct DataType< ::dynamics::capture_image_featuresResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dynamics/capture_image_featuresResponse";
  }

  static const char* value(const  ::dynamics::capture_image_featuresResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::dynamics::capture_image_featuresResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "std_msgs/Float32MultiArray kppt\n\
std_msgs/Float32MultiArray desc\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Float32MultiArray\n\
# Please look at the MultiArrayLayout message definition for\n\
# documentation on all multiarrays.\n\
\n\
MultiArrayLayout  layout        # specification of data layout\n\
float32[]         data          # array of data\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/MultiArrayLayout\n\
# The multiarray declares a generic multi-dimensional array of a\n\
# particular data type.  Dimensions are ordered from outer most\n\
# to inner most.\n\
\n\
MultiArrayDimension[] dim # Array of dimension properties\n\
uint32 data_offset        # padding bytes at front of data\n\
\n\
# Accessors should ALWAYS be written in terms of dimension stride\n\
# and specified outer-most dimension first.\n\
# \n\
# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n\
#\n\
# A standard, 3-channel 640x480 image with interleaved color channels\n\
# would be specified as:\n\
#\n\
# dim[0].label  = \"height\"\n\
# dim[0].size   = 480\n\
# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n\
# dim[1].label  = \"width\"\n\
# dim[1].size   = 640\n\
# dim[1].stride = 3*640 = 1920\n\
# dim[2].label  = \"channel\"\n\
# dim[2].size   = 3\n\
# dim[2].stride = 3\n\
#\n\
# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n\
================================================================================\n\
MSG: std_msgs/MultiArrayDimension\n\
string label   # label of given dimension\n\
uint32 size    # size of given dimension (in type units)\n\
uint32 stride  # stride of given dimension\n\
";
  }

  static const char* value(const  ::dynamics::capture_image_featuresResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::dynamics::capture_image_featuresRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.seq);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct capture_image_featuresRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::dynamics::capture_image_featuresResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.kppt);
    stream.next(m.desc);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct capture_image_featuresResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<dynamics::capture_image_features> {
  static const char* value() 
  {
    return "d2fb7032b25fab2a84d464cd5d61960b";
  }

  static const char* value(const dynamics::capture_image_features&) { return value(); } 
};

template<>
struct DataType<dynamics::capture_image_features> {
  static const char* value() 
  {
    return "dynamics/capture_image_features";
  }

  static const char* value(const dynamics::capture_image_features&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<dynamics::capture_image_featuresRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d2fb7032b25fab2a84d464cd5d61960b";
  }

  static const char* value(const dynamics::capture_image_featuresRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<dynamics::capture_image_featuresRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dynamics/capture_image_features";
  }

  static const char* value(const dynamics::capture_image_featuresRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<dynamics::capture_image_featuresResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d2fb7032b25fab2a84d464cd5d61960b";
  }

  static const char* value(const dynamics::capture_image_featuresResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<dynamics::capture_image_featuresResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dynamics/capture_image_features";
  }

  static const char* value(const dynamics::capture_image_featuresResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // DYNAMICS_SERVICE_CAPTURE_IMAGE_FEATURES_H

